using System;
using System.Data;
using System.Windows.Forms;
using Telerik.WinControls;

namespace eMediShop.CashCounter
{
    public partial class ucChangePayMode : UserControl
    {
        DataSet _ds = new DataSet();
        public ucChangePayMode()
        {
            InitializeComponent();
        }

        private void btnGet_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                Hoto p = new Hoto();
                p.unit_id = GlobalUsage.Unit_id; p.logic = "GetInvInfo"; p.login_id = GlobalUsage.Login_id;
                p.prm_1 = txtSaleInvNo.Text; p.prm_2 = "1900-01-01";
                datasetWithResult dwr = ConfigWebAPI.CallAPI("api/audit/HOTOQueries", p);
                _ds = dwr.result;
                rgvInfo.DataSource = _ds.Tables[0];
                if(_ds.Tables[0].Rows.Count==0)
                    RadMessageBox.Show("Sale Invoice is Not generated By You or Work ID is Closed.", "ExPro Help", MessageBoxButtons.OK, RadMessageIcon.Info);

            }
            catch (Exception ex) { RadMessageBox.Show(ex.Message, "ExPro Help", MessageBoxButtons.OK, RadMessageIcon.Info); }
            finally { Cursor.Current = Cursors.Default; }

        }

        private void rgvInfo_CommandCellClick(object sender, Telerik.WinControls.UI.GridViewCellEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if (e.Row.Cells["isActive"].Value.ToString() == "Y")
                    rgbPayMode.Enabled = true;
                else
                    rgbPayMode.Enabled = false;

                if (e.Row.Cells["pay_mode"].Value.ToString().ToUpper() == "CASH")
                    rbCash.IsChecked = true;
                else if (e.Row.Cells["pay_mode"].Value.ToString().ToUpper() == "CREDIT CARD")
                    rbSwipeCard.IsChecked = true;

            }
            catch (Exception ex) { RadMessageBox.Show(ex.Message, "ExPro Help", MessageBoxButtons.OK, RadMessageIcon.Info); }
            finally { Cursor.Current = Cursors.Default; }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                UpdatePayMode p = new UpdatePayMode();
                p.unit_id = GlobalUsage.Unit_id; p.logic = "UpdatePayMode"; p.loginId = GlobalUsage.Login_id;
                if (rbCash.IsChecked)
                    p.PayMode = "Cash";
                else if (rbSwipeCard.IsChecked)
                    p.PayMode = "Credit Card";
                else
                {
                    RadMessageBox.Show("Select Pay Mode.", "ExPro Help", MessageBoxButtons.OK, RadMessageIcon.Info);
                    return;
                }
                p.sale_inv_no = txtSaleInvNo.Text;
                p.prm_1 = "-"; p.prm_2 = "-";
                datasetWithResult dwr = ConfigWebAPI.CallAPI("api/sales/UpdatePayMode", p);
                RadMessageBox.Show(dwr.message, "ExPro Help", MessageBoxButtons.OK, RadMessageIcon.Info);
                btnGet.PerformClick();
            }
            catch (Exception ex) { RadMessageBox.Show(ex.Message, "ExPro Help", MessageBoxButtons.OK, RadMessageIcon.Info); }
            finally { Cursor.Current = Cursors.Default; }
            
        }

        private void rgbPayMode_Click(object sender, EventArgs e)
        {

        }
    }
}
